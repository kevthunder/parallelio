{"version":3,"file":"../StarMapGenerator.js","sourceRoot":"../../src","sources":["StarMapGenerator.coffee"],"names":[],"mappings":"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","sourcesContent":["Element = require('spark-starter').Element\nMap = require('./Map')\nStarSystem = require('./StarSystem')\nstarNames = require('parallelio-strings').starNames\n\nmodule.exports = class StarMapGenerator extends Element\n  constructor: (options)->\n    super()\n    @opt = Object.assign({},@defOpt,options)\n  defOpt: {\n    nbStars: 20\n    minX: 0\n    maxX: 500\n    minY: 0\n    maxY: 500\n    minStarDist: 10\n    minLinkDist: 10\n    linksByStars: 3\n    linkTries: 3\n    mapClass: Map\n    starClass: StarSystem\n    linkClass: StarSystem.Link\n    rng: Math.random\n    starNames: starNames\n  }\n  generate: ->\n    @map = new @opt.mapClass()\n    @stars = @map.locations.copy()\n    @links = []\n    @createStars(@opt.nbStars)\n    @makeLinks()\n    @map\n  createStars: (nb)->\n    for i in [0...nb]\n      @createStar()\n  createStar: (opt = {})->\n    unless opt.x and opt.y\n      pos = @randomStarPos()\n      if pos?\n        opt = Object.assign({},opt, {x:pos.x,y:pos.y})\n      else\n        return null\n\n    unless opt.name\n      name = @randomStarName()\n      if name?\n        opt = Object.assign({},opt, {name:name})\n      else\n        return null\n\n    star = new @opt.starClass(opt)\n    @map.locations.push(star)\n    @stars.push(star)\n    star\n\n  randomStarPos: ->\n    j = 0\n    loop\n      pos = \n        x: Math.floor(@opt.rng() * (@opt.maxX - @opt.minX) + @opt.minX)\n        y: Math.floor(@opt.rng() * (@opt.maxY - @opt.minY) + @opt.minY)\n      break unless j < 10 and @stars.find((star)=> star.dist(pos.x,pos.y) <= @opt.minStarDist)\n      j++\n    unless j >= 10\n      pos\n\n  randomStarName: ->\n    if @opt.starNames?.length\n      pos = Math.floor(@opt.rng()*@opt.starNames.length)\n      name = @opt.starNames[pos]\n      @opt.starNames.splice(pos,1)\n      name\n  makeLinks: ->\n    @stars.forEach (star)=>\n      @makeLinksFrom(star)\n  makeLinksFrom: (star)->\n    tries = @opt.linkTries\n    needed = @opt.linksByStars - star.links.count()\n    if needed > 0\n      closests = @stars.filter(\n        (star2)=> star2 != star and !star.links.findStar(star2)\n      ).closests(star.x,star.y)\n      if closests.count() > 0 \n        loop\n          close = closests.shift()\n          link = @createLink(star,close)\n          if @validateLink(link)\n            @links.push(link)\n            star.addLink(link)\n            needed -= 1\n          else\n            tries -= 1\n          break unless needed > 0 and tries > 0 and closests.count() > 0\n  createLink: (star1,star2)->\n    new @opt.linkClass(star1,star2)\n  validateLink: (link)->\n    !@stars.find((star)=> \n      star != link.star1 and \n      star != link.star2 and \n      link.closeToPoint(star.x,star.y,@opt.minLinkDist)\n    ) and\n    !@links.find((link2)=> \n      link2.intersectLink(link)\n    ) \n\n\n  \n\n\n\n        "]}