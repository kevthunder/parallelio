{"version":3,"file":"../VisionCalculator.js","sourceRoot":"../../src","sources":["VisionCalculator.coffee"],"names":[],"mappings":"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","sourcesContent":["LineOfSight = require('./LineOfSight')\nDirection = require('parallelio-tiles').Direction\nTileContainer = require('parallelio-tiles').TileContainer\nTileReference = require('parallelio-tiles').TileReference\n\nmodule.exports = class VisionCalculator\n  constructor: (@originTile, @offset = {x:0.5,y:0.5})->\n    @pts = {}\n    @visibility = {}\n    @stack = []\n    @calculated = false\n  calcul: ->\n    @init()\n    while @stack.length\n      @step()\n    @calculated = true\n  init: ->\n    @pts = {}\n    @visibility = {}\n    initialPts = [{x:0,y:0},{x:1,y:0},{x:0,y:1},{x:1,y:1}]\n    initialPts.forEach (pt)=>\n      @setPt(@originTile.x+pt.x, @originTile.y+pt.y, true)\n    firstBatch = [\n      {x:-1,y:-1},{x:-1,y:0},{x:-1,y:1},{x:-1,y:2},\n      {x:2,y:-1},{x:2,y:0},{x:2,y:1},{x:2,y:2},\n      {x:0,y:-1},{x:1,y:-1},\n      {x:0,y:2},{x:1,y:2}\n    ]\n    @stack = firstBatch.map (pt) => {x:@originTile.x+pt.x, y:@originTile.y+pt.y}\n  setPt: (x, y, val)->\n    @pts[x+':'+y] = val\n    adjancent = [{x:0,y:0},{x:-1,y:0},{x:0,y:-1},{x:-1,y:-1}]\n    adjancent.forEach (pt)=>\n      @addVisibility(x+pt.x, y+pt.y, if val then 1/adjancent.length else 0)\n  getPt: (x, y)->\n    @pts[x+':'+y]\n  addVisibility: (x, y, val)->\n    unless @visibility[x]?\n      @visibility[x] = {}\n    if @visibility[x][y]?\n      @visibility[x][y] += val\n    else\n      @visibility[x][y] = val\n  getVisibility: (x,y)->\n    if !@visibility[x]? or !@visibility[x][y]?\n      0\n    else\n      @visibility[x][y]\n  canProcess: (x, y)->\n    !@stack.some((pt)=> pt.x == x and pt.y == y) and !@getPt(x,y)?\n  step: ->\n    pt = @stack.shift()\n    los = new LineOfSight(@originTile.container, @originTile.x+@offset.x, @originTile.y+@offset.y, pt.x, pt.y)\n    los.reverseTracing()\n    los.traversableCallback = (tile,entryX,entryY)=>\n      if tile?\n        if @getVisibility(tile.x,tile.y) == 1\n          los.forceSuccess()\n        else\n          tile.transparent\n    @setPt(pt.x,pt.y, los.getSuccess())\n    if los.getSuccess()\n      Direction.all.forEach (direction)=>\n        nextPt = {x:pt.x+direction.x, y:pt.y+direction.y}\n        if @canProcess(nextPt.x, nextPt.y)\n          @stack.push(nextPt)\n\n  getBounds: ->\n    boundaries = {top:null,left:null,bottom:null,right:null}\n    for x, col of @visibility\n      for y, val of col\n        if !boundaries.top? || y < boundaries.top\n          boundaries.top = y\n        if !boundaries.left? || x < boundaries.left\n          boundaries.left = x\n        if !boundaries.bottom? || y > boundaries.bottom\n          boundaries.bottom = y\n        if !boundaries.right? || x > boundaries.right\n          boundaries.right = x\n    boundaries\n\n  toContainer: ->\n    res = new TileContainer()\n    res.owner = false\n    for x, col of @visibility\n      for y, val of col\n        tile = @originTile.container.getTile(x,y)\n        if val!=0 and tile?\n          tile = new TileReference(tile)\n          tile.visibility = val\n          res.addTile tile\n    res\n\n  toMap: ->\n    res = Object.assign({map:[]},@getBounds())\n    for y in [res.top..res.bottom-1]\n      res.map[y-res.top] = []\n      for x in [res.left..res.right-1]\n        res.map[y-res.top][x-res.left] = @getVisibility(x,y)\n    res"]}