{"version":3,"file":"../LineOfSight.js","sourceRoot":"../../src","sources":["LineOfSight.coffee"],"names":[],"mappings":"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","sourcesContent":["module.exports = class LineOfSight\n  constructor: (@tiles, @x1=0, @y1=0, @x2=0, @y2=0) ->\n  setX1: (val) ->\n    @x1 = val\n    @invalidade()\n  setY1: (val) ->\n    @y1 = val\n    @invalidade()\n  setX2: (val) ->\n    @x2 = val\n    @invalidade()\n  setY2: (val) ->\n    @y2 = val\n    @invalidade()\n  invalidade: ->\n    @endPoint = null\n    @success = null\n    @calculated = false\n  testTile: (tile,entryX,entryY) ->\n    if @traversableCallback?\n      @traversableCallback(tile,entryX,entryY)\n    else\n      tile? and if typeof tile.getTransparent == 'function'\n        tile.getTransparent()\n      else if typeof tile.transparent != undefined\n        tile.transparent\n      else \n        true\n  testTileAt: (x,y,entryX,entryY) ->\n    @testTile(@tiles.getTile(Math.floor(x),Math.floor(y)),entryX,entryY)\n  reverseTracing: ->\n    tmpX = @x1\n    tmpY = @y1\n    @x1 = @x2\n    @y1 = @y2\n    @x2 = tmpX\n    @y2 = tmpY\n    @reversed = !@reversed\n  calcul: ->\n    ratio = (@x2-@x1)/(@y2-@y1)\n    total = Math.abs(@x2-@x1)+Math.abs(@y2-@y1)\n    positiveX = (@x2 - @x1) >= 0\n    positiveY = (@y2 - @y1) >= 0\n    tileX = x = @x1\n    tileY = y = @y1\n    if @reversed\n      tileX = if positiveX then x else Math.ceil(x)-1\n      tileY = if positiveY then y else Math.ceil(y)-1\n    while total > Math.abs(x-@x1)+Math.abs(y-@y1) and @testTileAt(tileX, tileY, x, y)\n      nextX = if positiveX then Math.floor(x)+1 else Math.ceil(x)-1\n      nextY = if positiveY then Math.floor(y)+1 else Math.ceil(y)-1\n      if @x2-@x1 == 0\n        y = nextY\n      else if @y2-@y1 == 0\n        x = nextX\n      else if Math.abs( (nextX-x)/(@x2-@x1) ) < Math.abs( (nextY-y)/(@y2-@y1) )\n        x = nextX\n        y = (nextX-@x1)/ratio+@y1\n      else\n        x = (nextY-@y1)*ratio+@x1\n        y = nextY\n      tileX = if positiveX then x else Math.ceil(x)-1\n      tileY = if positiveY then y else Math.ceil(y)-1\n    if total <= Math.abs(x-@x1)+Math.abs(y-@y1)\n      @endPoint = {x: @x2, y: @y2, tile: @tiles.getTile(Math.floor(@x2),Math.floor(@y2))} \n      @success = true\n    else\n      @endPoint = {x: x, y: y, tile: @tiles.getTile(Math.floor(tileX),Math.floor(tileY))}\n      @success = false\n  forceSuccess: ()->\n    @endPoint = {x: @x2, y: @y2, tile: @tiles.getTile(Math.floor(@x2),Math.floor(@y2))} \n    @success = true\n    @calculated = true\n  getSuccess: ->\n    unless @calculated\n      @calcul()\n    @success\n  getEndPoint: ->\n    unless @calculated\n      @calcul()\n    @endPoint"]}