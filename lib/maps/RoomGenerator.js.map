{"version":3,"file":"../RoomGenerator.js","sourceRoot":"../../src","sources":["RoomGenerator.coffee"],"names":[],"mappings":"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","sourcesContent":["Element = require('spark-starter').Element\nTileContainer = require('parallelio-tiles').TileContainer\nTile = require('parallelio-tiles').Tile\nDirection = require('parallelio-tiles').Direction\nDoor = require('./Door')\n\nmodule.exports = class RoomGenerator extends Element\n  constructor: (options) ->\n    super()\n    @setProperties(options)\n  @properties\n    rng:\n      default: Math.random\n    maxVolume:\n      default: 25\n    minVolume:\n      default: 50\n    width:\n      default: 30\n    height:\n      default: 15\n    tileContainer:\n      calcul: ->\n        tiles = new TileContainer()\n        for x in [0..@width]\n          for y in [0..@height]\n            tiles.addTile(new Tile(x,y))\n        tiles\n    floorFactory: \n      default: (opt) ->\n        new Tile(opt.x,opt.y)\n    wallFactory: \n      default: null\n    doorFactory: \n      calcul: ->\n        @floorFactory\n  initTiles: ->\n    @finalTiles = null\n    @rooms = []\n    @free = @tileContainer.allTiles().filter (tile) =>\n      for direction in Direction.all\n        next = @tileContainer.getTile(tile.x + direction.x, tile.y + direction.y)\n        unless next?\n          return false\n      true\n  calcul: ->\n    @initTiles()\n    i = 0\n    while @step() or @newRoom()\n      i++\n    @createDoors()\n    @rooms\n    @makeFinalTiles()\n  makeFinalTiles: ->\n    @finalTiles = @tileContainer.allTiles().map (tile) =>\n      if tile.factory?\n        opt = {x:tile.x,y:tile.y}\n        if tile.factoryOptions?\n          opt = Object.assign(opt,tile.factoryOptions)\n        tile.factory(opt)\n    .filter (tile) =>\n      tile?\n  getTiles:->\n    unless @finalTiles?\n      @calcul()\n    @finalTiles\n  newRoom: ->\n    if @free.length\n      @volume = Math.floor(@rng() * (@maxVolume-@minVolume)) + @minVolume\n      @room = new RoomGenerator.Room()\n  randomDirections: ->\n    o = Direction.adjacents.slice()\n    j = undefined\n    x = undefined\n    i = o.length\n    while i\n      j = Math.floor(@rng() * i)\n      x = o[--i]\n      o[i] = o[j]\n      o[j] = x\n    o\n  step: ->\n    if @room\n      if @free.length and @room.tiles.length < @volume - 1\n        if @room.tiles.length\n          tries = @randomDirections()\n          success = false\n          while tries.length and !success\n            success = @expand(@room, tries.pop(), @volume)\n          unless success\n            @roomDone()\n          success\n        else\n          @allocateTile(@randomFreeTile(), @room)\n          true\n      else\n        @roomDone()\n        false\n  roomDone: ->\n    @rooms.push(@room)\n    @allocateWalls(@room)\n    @room = null\n  expand: (room, direction, max = 0) ->\n    success = false\n    for tile in room.tiles\n      if max == 0 or room.tiles.length < max\n        if next = @tileOffsetIsFree(tile, direction)\n          @allocateTile(next, room)\n          success = true\n        if (second = @tileOffsetIsFree(tile, direction, 2)) and !@tileOffsetIsFree(tile, direction, 3)\n          @allocateTile(second, room)\n    success\n  allocateWalls: (room) ->\n    for tile in room.tiles\n      for direction in Direction.all\n        next = @tileContainer.getTile(tile.x + direction.x, tile.y + direction.y)\n        if next? and next.room != room\n          unless direction in Direction.corners\n            otherSide = @tileContainer.getTile(tile.x + direction.x * 2, tile.y + direction.y * 2)\n            nextRoom = if otherSide?.room? then otherSide.room else null\n            room.addWall(next, nextRoom)\n            nextRoom.addWall(next, room) if nextRoom?\n          next.factory = @wallFactory\n          @allocateTile(next)\n  createDoors: ->\n    for room in @rooms\n      for walls in room.wallsByRooms()\n        if walls.room? and room.doorsForRoom(walls.room) < 1\n          door = walls.tiles[Math.floor(@rng()*walls.tiles.length)]\n          door.factory = @doorFactory\n          door.factoryOptions = {\n            direction: if @tileContainer.getTile(door.x+1, door.y).factory == @floorFactory then Door.directions.vertical else Door.directions.horizontal\n          }\n          room.addDoor(door, walls.room)\n          walls.room.addDoor(door, room)\n  allocateTile: (tile, room = null) ->\n    if room?\n      room.addTile(tile)\n      tile.factory = @floorFactory\n    index = @free.indexOf(tile)\n    if index > -1\n      @free.splice(index, 1)\n  tileOffsetIsFree: (tile, direction, multiply = 1) ->\n    @tileIsFree(tile.x + direction.x * multiply, tile.y + direction.y * multiply)\n  tileIsFree: (x,y) ->\n    tile = @tileContainer.getTile(x,y)\n    if tile? and tile in @free\n      tile\n    else\n      false\n  randomFreeTile: -> \n    @free[Math.floor(@rng() * @free.length)]\n\n\nclass RoomGenerator.Room\n  constructor: () ->\n    @tiles = []\n    @walls = []\n    @doors = []\n  addTile: (tile) ->\n    @tiles.push(tile)\n    tile.room = this\n  containsWall: (tile) ->\n    for wall in @walls\n      if wall.tile == tile\n        return wall\n    false\n  addWall: (tile, nextRoom) ->\n    existing = @containsWall(tile)\n    if existing\n      existing.nextRoom = nextRoom\n    else\n      @walls.push({tile:tile, nextRoom:nextRoom})\n  wallsByRooms: ->\n    rooms = []\n    res = []\n    for wall in @walls\n      pos = rooms.indexOf(wall.nextRoom)\n      if pos == -1\n        pos = rooms.length\n        rooms.push(wall.nextRoom)\n        res.push({room:wall.nextRoom,tiles:[]})\n      res[pos].tiles.push(wall.tile)\n    res\n  addDoor: (tile, nextRoom) ->\n    @doors.push({tile:tile, nextRoom:nextRoom})\n  doorsForRoom: (room) ->\n    res = []\n    for door in @doors\n      if door.nextRoom == room\n        res.push(door.tile)\n    res\n"]}