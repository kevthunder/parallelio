{"version":3,"file":"../Map.js","sourceRoot":"../../src","sources":["Map.coffee"],"names":[],"mappings":"AAAA,IAAA,OAAA,EAAA;;AAAA,OAAA,GAAU,OAAA,CAAQ,eAAR,CAAwB,CAAC;;AAEnC,MAAM,CAAC,OAAP,GAAuB;EAAN,MAAA,IAAA,QAAkB,QAAlB;IA2Bf,eAAiB,CAAC,QAAD,EAAW,UAAX,CAAA;MACf,IAAI,wBAAD,IAAoB,QAAQ,CAAC,CAAT,GAAa,UAAU,CAAC,GAA/C;QACE,UAAU,CAAC,GAAX,GAAiB,QAAQ,CAAC,EAD5B;;MAEA,IAAI,yBAAD,IAAqB,QAAQ,CAAC,CAAT,GAAa,UAAU,CAAC,IAAhD;QACE,UAAU,CAAC,IAAX,GAAkB,QAAQ,CAAC,EAD7B;;MAEA,IAAI,2BAAD,IAAuB,QAAQ,CAAC,CAAT,GAAa,UAAU,CAAC,MAAlD;QACE,UAAU,CAAC,MAAX,GAAoB,QAAQ,CAAC,EAD/B;;MAEA,IAAI,0BAAD,IAAsB,QAAQ,CAAC,CAAT,GAAa,UAAU,CAAC,KAAjD;eACE,UAAU,CAAC,KAAX,GAAmB,QAAQ,CAAC,EAD9B;;IAPe;;EA3BF;;EACf,GAAC,CAAA,UAAD,CACE;IAAA,SAAA,EACE;MAAA,UAAA,EACE;QAAA,OAAA,EAAS,QAAA,CAAC,CAAD,EAAG,CAAH,CAAA;AACP,cAAA,GAAA,EAAA;UAAA,GAAA,GAAM;UACN,OAAA,GAAU;UACV,IAAC,CAAA,OAAD,CAAS,QAAA,CAAC,QAAD,CAAA;AACP,gBAAA;YAAA,IAAA,GAAO,QAAQ,CAAC,IAAT,CAAc,CAAd,EAAgB,CAAhB;YACP,IAAI,aAAD,IAAS,OAAA,GAAU,IAAtB;cACE,GAAA,GAAM;qBACN,OAAA,GAAU,KAFZ;;UAFO,CAAT;iBAKA;QARO,CAAT;QASA,QAAA,EAAU,QAAA,CAAC,CAAD,EAAG,CAAH,CAAA;AACR,cAAA;UAAA,KAAA,GAAQ,IAAC,CAAA,GAAD,CAAK,QAAA,CAAC,QAAD,CAAA;mBAAa;cAAC,IAAA,EAAK,QAAQ,CAAC,IAAT,CAAc,CAAd,EAAgB,CAAhB,CAAN;cAA0B,QAAA,EAAS;YAAnC;UAAb,CAAL;UACR,KAAK,CAAC,IAAN,CAAW,QAAA,CAAC,CAAD,EAAI,CAAJ,CAAA;mBACT,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC;UADF,CAAX;iBAEA,IAAC,CAAA,IAAD,CAAM,KAAK,CAAC,GAAN,CAAU,QAAA,CAAC,IAAD,CAAA;mBAAS,IAAI,CAAC;UAAd,CAAV,CAAN;QAJQ;MATV;IADF,CADF;IAgBA,UAAA,EACE;MAAA,MAAA,EAAO,QAAA,CAAA,CAAA;AACL,YAAA;QAAA,UAAA,GAAa;UAAC,GAAA,EAAI,IAAL;UAAU,IAAA,EAAK,IAAf;UAAoB,MAAA,EAAO,IAA3B;UAAgC,KAAA,EAAM;QAAtC;QACb,IAAC,CAAA,SAAS,CAAC,OAAX,CAAmB,CAAC,QAAD,CAAA,GAAA;iBACjB,IAAC,CAAA,eAAD,CAAiB,QAAjB,EAA2B,UAA3B;QADiB,CAAnB;eAEA;MAJK,CAAP;MAKA,MAAA,EAAO,QAAA,CAAC,GAAD,CAAA;eACL,MAAM,CAAC,MAAP,CAAc,CAAA,CAAd,EAAiB,GAAjB;MADK;IALP;EAjBF,CADF","sourcesContent":["Element = require('spark-starter').Element\n\nmodule.exports = class Map extends Element\n  @properties\n    locations:\n      collection: \n        closest: (x,y)->\n          min = null\n          minDist = null\n          @forEach (location)->\n            dist = location.dist(x,y)\n            if !min? or minDist > dist\n              min = location\n              minDist = dist\n          min\n        closests: (x,y)->\n          dists = @map (location)-> {dist:location.dist(x,y), location:location}\n          dists.sort (a, b)->\n            a.dist - b.dist\n          @copy(dists.map (dist)-> dist.location)\n    boundaries:\n      calcul:->\n        boundaries = {top:null,left:null,bottom:null,right:null}\n        @locations.forEach (location)=>\n          @_addToBondaries(location, boundaries)\n        boundaries\n      output:(val)->\n        Object.assign({},val)\n\n  _addToBondaries: (location, boundaries)->\n    if !boundaries.top? || location.y < boundaries.top\n      boundaries.top = location.y\n    if !boundaries.left? || location.x < boundaries.left\n      boundaries.left = location.x\n    if !boundaries.bottom? || location.y > boundaries.bottom\n      boundaries.bottom = location.y\n    if !boundaries.right? || location.x > boundaries.right\n      boundaries.right = location.x\n"]}