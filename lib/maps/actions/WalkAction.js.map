{"version":3,"file":"../../actions/WalkAction.js","sourceRoot":"../../../src","sources":["actions/WalkAction.coffee"],"names":[],"mappings":"AAAA,IAAA,UAAA,EAAA,QAAA,EAAA,YAAA,EAAA;;AAAA,UAAA,GAAa,OAAA,CAAQ,uBAAR;;AACb,QAAA,GAAW,OAAA,CAAQ,aAAR;;AACX,YAAA,GAAe,OAAA,CAAQ,gBAAR;;AAEf,MAAM,CAAC,OAAP,GAAuB;EAAN,MAAA,WAAA,QAAyB,aAAzB;IAYf,OAAS,CAAA,CAAA;MACP,IAAG,uBAAH;QACE,IAAC,CAAA,KAAK,CAAC,IAAI,CAAC,SAAZ,CAAA,EADF;;MAEA,IAAC,CAAA,IAAD,GAAQ,IAAC,CAAA,KAAK,CAAC,IAAP,GAAc,IAAI,QAAJ,CAAa,IAAC,CAAA,KAAd,EAAqB,IAAC,CAAA,UAAtB;MACtB,IAAC,CAAA,KAAK,CAAC,IAAI,CAAC,EAAZ,CAAe,UAAf,EAA2B,CAAA,CAAA,GAAA;eACzB,IAAC,CAAA,MAAD,CAAA;MADyB,CAA3B;MAEA,IAAC,CAAA,KAAK,CAAC,IAAI,CAAC,EAAZ,CAAe,aAAf,EAA8B,CAAA,CAAA,GAAA;eAC5B,IAAC,CAAA,SAAD,CAAA;MAD4B,CAA9B;aAEA,IAAC,CAAA,KAAK,CAAC,IAAI,CAAC,KAAZ,CAAA;IARO;;IAUT,OAAS,CAAA,CAAA;WAAT,CAAA,OACE,CAAA;MACA,IAAG,IAAC,CAAA,IAAJ;eACE,IAAC,CAAA,IAAI,CAAC,OAAN,CAAA,EADF;;IAFO;;IAKT,WAAa,CAAA,CAAA;MACX,IAAC,CAAA,UAAU,CAAC,MAAZ,CAAA;aACA;IAFW;;EA3BE;;EACf,UAAC,CAAA,UAAD,CACE;IAAA,UAAA,EACE;MAAA,MAAA,EAAQ,QAAA,CAAA,CAAA;eACN,IAAI,UAAJ,CAAe,IAAC,CAAA,KAAK,CAAC,IAAI,CAAC,SAA3B,EAAsC,IAAC,CAAA,KAAK,CAAC,IAA7C,EAAmD,IAAC,CAAA,MAApD,EAA4D;UAC1D,SAAA,EAAW,CAAC,IAAD,CAAA,GAAA;YACT,IAAG,OAAO,IAAC,CAAA,KAAK,CAAC,WAAd,KAA6B,UAAhC;qBACI,IAAC,CAAA,KAAK,CAAC,WAAP,CAAmB,IAAnB,EADJ;aAAA,MAAA;qBAGI,IAAI,CAAC,SAHT;;UADS;QAD+C,CAA5D;MADM;IAAR;EADF,CADF","sourcesContent":["PathFinder = require('parallelio-pathfinder')\nPathWalk = require('../PathWalk')\nTargetAction = require('./TargetAction')\n\nmodule.exports = class WalkAction extends TargetAction\n  @properties\n    pathFinder:\n      calcul: ->\n        new PathFinder(@actor.tile.container, @actor.tile, @target, {\n          validTile: (tile) =>\n            if typeof @actor.canGoOnTile == \"function\"\n                @actor.canGoOnTile(tile)\n            else\n                tile.walkable\n        })\n\n  execute: -> \n    if @actor.walk?\n      @actor.walk.interrupt()\n    @walk = @actor.walk = new PathWalk(@actor, @pathFinder)\n    @actor.walk.on 'finished', =>\n      @finish()\n    @actor.walk.on 'interrupted', =>\n      @interrupt()\n    @actor.walk.start()\n\n  destroy: ->\n    super()\n    if @walk\n      @walk.destroy()\n\n  validTarget: ()->\n    @pathFinder.calcul()\n    @pathFinder.solution?"]}