{"version":3,"file":"../DamagePropagation.js","sourceRoot":"../../src","sources":["DamagePropagation.coffee"],"names":[],"mappings":"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","sourcesContent":["Element = require('spark-starter').Element\nLineOfSight = require('./LineOfSight')\nDirection = require('parallelio-tiles').Direction\n\nmodule.exports = class DamagePropagation extends Element\n  constructor: (options)->\n    super()\n    @setProperties(options)\n  @properties\n    tile:\n      default: null\n    power:\n      default: 10\n    range:\n      default: 1\n    type:\n      default: null\n  getTileContainer: ->\n    @tile.container\n  apply: ->\n    for damage in @getDamaged()\n      damage.target.damage(damage.damage)\n  getInitialTiles: ->\n    ctn = @getTileContainer()\n    ctn.inRange(@tile, @range)\n  getInitialDamages: ->\n    damages = []\n    tiles = @getInitialTiles()\n    for tile in tiles\n      if tile.damageable and dmg = @initialDamage(tile, tiles.length)\n        damages.push(dmg)\n    damages\n  getDamaged: ->\n    unless @_damaged?\n      added = null\n      while added = @step(added)\n        true\n    @_damaged\n  step: (added)->\n    if added?\n      if @extendedDamage?\n        added = @extend(added)\n        @_damaged = added.concat(@_damaged)\n        added.length > 0 && added\n    else\n      @_damaged = @getInitialDamages()\n  inDamaged: (target, damaged)->\n    for damage, index in damaged\n      return index if damage.target == target\n    false\n  extend: (damaged) ->\n    ctn = @getTileContainer()\n    added = []\n    for damage in damaged\n      local = []\n      if damage.target.x?\n        for dir in Direction.adjacents\n          tile = ctn.getTile(damage.target.x + dir.x, damage.target.y + dir.y)\n          if tile? and tile.damageable and @inDamaged(tile, @_damaged) == false\n            local.push tile\n      for target in local\n        if dmg = @extendedDamage(target, damage, local.length)\n          if (existing = @inDamaged(target, added)) == false\n            added.push(dmg)\n          else\n            added[existing] = @mergeDamage(added[existing], dmg)\n    added\n  mergeDamage:(d1, d2)->\n    {\n      target: d1.target\n      power:  d1.power  + d2.power\n      damage: d1.damage + d2.damage\n    }\n  modifyDamage:(target,power)->\n    if typeof target.modifyDamage == 'function'\n      Math.floor(target.modifyDamage(power, @type))\n    else\n      Math.floor(power)\n    \nclass DamagePropagation.Normal extends DamagePropagation\n  initialDamage: (target, nb) ->\n    dmg = @modifyDamage(target, @power)\n    if dmg > 0\n      {\n        target: target\n        power: @power\n        damage: dmg\n      }\nclass DamagePropagation.Thermic extends DamagePropagation\n  extendedDamage: (target, last, nb) ->\n    power = (last.damage-1) / 2 / nb * Math.min(1,last.target.health/last.target.maxHealth*5)\n    dmg = @modifyDamage(target, power)\n    if dmg > 0\n      {\n        target: target\n        power: power\n        damage: dmg\n      }\n  initialDamage: (target, nb) ->\n    power = @power / nb\n    dmg = @modifyDamage(target, power)\n    if dmg > 0\n      {\n        target: target\n        power: power\n        damage: dmg\n      }\n\nclass DamagePropagation.Kinetic extends DamagePropagation\n  extendedDamage: (target, last, nb) ->\n    power = (last.power-last.damage)*Math.min(1,last.target.health/last.target.maxHealth*2)-1\n    dmg = @modifyDamage(target, power)\n    if dmg > 0\n      {\n        target: target\n        power: power\n        damage: dmg\n      }\n  initialDamage: (target, nb) ->\n    dmg = @modifyDamage(target, @power)\n    if dmg > 0\n      {\n        target: target\n        power: @power\n        damage: dmg\n      }\n  modifyDamage:(target,power)->\n    if typeof target.modifyDamage == 'function'\n      Math.floor(target.modifyDamage(power, @type))\n    else\n      Math.floor(power*0.25)\n  mergeDamage:(d1, d2)->\n    {\n      target: d1.target\n      power:  Math.floor((d1.power  + d2.power)  /2)\n      damage: Math.floor((d1.damage + d2.damage) /2)\n    }\n\nclass DamagePropagation.Explosive extends DamagePropagation\n  @properties\n    rng:\n      default: Math.random\n    traversableCallback:\n      default: (tile)->\n        !(typeof tile.getSolid == 'function' && tile.getSolid())\n\n  getDamaged: ->\n    @_damaged = []\n    shards = Math.pow(@range+1, 2)\n    shardPower = @power / shards\n    inside = @tile.health <= @modifyDamage(@tile,shardPower)\n    shardPower *= 4 if inside\n    for shard in [0..shards]\n      angle = @rng()*Math.PI*2\n      target = @getTileHitByShard(inside,angle)\n      if target?\n        @_damaged.push({\n          target: target\n          power: shardPower\n          damage: @modifyDamage(target,shardPower)\n        })\n    @_damaged\n\n  getTileHitByShard: (inside,angle)->\n    ctn = @getTileContainer()\n    dist = @range * @rng()\n    target = {x: @tile.x + 0.5 + dist * Math.cos(angle), y: @tile.y + 0.5 + dist * Math.sin(angle)}\n    if inside\n      vertex = new LineOfSight(ctn, @tile.x+0.5, @tile.y+0.5, target.x, target.y)\n      vertex.traversableCallback = (tile)=>\n        !inside or (tile? and @traversableCallback(tile))\n      vertex.getEndPoint().tile\n    else\n      ctn.getTile Math.floor(target.x), Math.floor(target.y)"]}